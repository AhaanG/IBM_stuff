{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1H89hGA6jhNw-DDZbrcoMkbVc9NPX-E8D",
      "authorship_tag": "ABX9TyNhApOj0jv+wZ7cXWcDQDha",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AhaanG/IBM_stuff/blob/master/EcoHealth_AI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k1ai28bM7NGE",
        "outputId": "c2ccbb49-90f0-4d2a-f0b3-9b3f6432c9ad"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "runnnig\n",
            "Index(['date_time', 'is_holiday', 'humidity', 'wind_speed', 'wind_direction',\n",
            "       'visibility_in_miles', 'dew_point', 'temperature', 'rain_p_h',\n",
            "       'snow_p_h', 'clouds_all', 'weather_type', 'traffic_volume'],\n",
            "      dtype='object')\n",
            "Index(['No', 'year', 'month', 'day', 'hour', 'PM2.5', 'PM10', 'SO2', 'NO2',\n",
            "       'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'RAIN', 'wd', 'WSPM', 'station'],\n",
            "      dtype='object')\n",
            "Index(['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'], dtype='object')\n",
            "Index(['season', 'age', 'child disease', 'accident', 'surgical_intervention',\n",
            "       'high_fevers', 'alcohol', 'smoking', 'hrs_sitting', 'diagnosis'],\n",
            "      dtype='object')\n",
            "Index(['Country', 'City', 'AQI Value', 'AQI Category', 'CO AQI Value',\n",
            "       'CO AQI Category', 'Ozone AQI Value', 'Ozone AQI Category',\n",
            "       'NO2 AQI Value', 'NO2 AQI Category', 'PM2.5 AQI Value',\n",
            "       'PM2.5 AQI Category'],\n",
            "      dtype='object')\n",
            "Index(['Age', 'Sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n",
            "       'exang', 'oldpeak', 'slope', 'ca', 'thal', 'num'],\n",
            "      dtype='object')\n",
            "Index(['Age', 'SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate',\n",
            "       'RiskLevel'],\n",
            "      dtype='object')\n",
            "Index(['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity',\n",
            "       'Organic_carbon', 'Trihalomethanes', 'Turbidity', 'Potability'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "air_quality = pd.read_csv(\"/content/drive/MyDrive/dataset/air quality/test.csv\")\n",
        "\n",
        "beijing_air_1 = pd.read_csv(\"/content/drive/MyDrive/dataset/beijing+multi+site+air+quality+data/PRSA2017_Data_20130301-20170228/PRSA_Data_20130301-20170228/PRSA_Data_Aotizhongxin_20130301-20170228.csv\")\n",
        "beijing_air_2 = pd.concat([pd.read_csv(\"/content/drive/MyDrive/dataset/beijing+multi+site+air+quality+data/data.csv\"), pd.read_csv(\"/content/drive/MyDrive/dataset/beijing+multi+site+air+quality+data/test.csv\")])\n",
        "fertility = pd.read_csv(\"/content/drive/MyDrive/dataset/fertility/fertility_Diagnosis.csv\")\n",
        "\n",
        "global_pollution = pd.read_csv(\"/content/drive/MyDrive/dataset/global air pollution/global air pollution dataset.csv\")\n",
        "\n",
        "heart_disease= pd.read_csv(\"/content/drive/MyDrive/dataset/heart+disease/processed.cleveland.csv\")\n",
        "\n",
        "maternal_health = pd.read_csv(\"/content/drive/MyDrive/dataset/maternal+health+risk/Maternal Health Risk Data Set.csv\")\n",
        "\n",
        "water_quality = pd.read_csv(\"/content/drive/MyDrive/dataset/water quality/water_potability.csv\")\n",
        "\n",
        "print(\"runnnig\")\n",
        "# datasets = [air_quality, beijing_air_1, beijing_air_2, fertility, global_pollution, heart_disease, maternal_health, water_quality]\n",
        "# for each in datasets:\n",
        "#   print(f\"{each.columns}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.impute import SimpleImputer, KNNImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "\n",
        "def my_imputer(df):\n",
        "    numerical_cols = df.select_dtypes(include=[np.number]).columns\n",
        "    categorical_cols = df.select_dtypes(include=[object]).columns\n",
        "    datetime_cols = df.select_dtypes(include=[np.datetime64]).columns\n",
        "\n",
        "    imputer_cat = SimpleImputer(strategy='most_frequent')\n",
        "    if len(categorical_cols)>=1:\n",
        "      df[categorical_cols] = imputer_cat.fit_transform(df[categorical_cols])\n",
        "\n",
        "    df[datetime_cols] = df[datetime_cols].fillna(method='ffill')\n",
        "\n",
        "    imputer_num = KNNImputer(n_neighbors=5)\n",
        "    df[numerical_cols] = imputer_num.fit_transform(df[numerical_cols])\n",
        "\n",
        "    return df\n",
        "\n",
        "print(\"Running\")\n",
        "\n",
        "air_quality_imputed = my_imputer(air_quality)\n",
        "beijing_air_1_imputed = my_imputer(beijing_air_1)\n",
        "beijing_air_2_imputed = my_imputer(beijing_air_2)\n",
        "fertility_imputed = my_imputer(fertility)\n",
        "global_pollution_imputed = my_imputer(global_pollution)\n",
        "heart_disease_imputed = my_imputer(heart_disease)\n",
        "maternal_health_imputed = my_imputer(maternal_health)\n",
        "water_quality_imputed = my_imputer(water_quality)\n",
        "\n",
        "print(air_quality_imputed.shape)"
      ],
      "metadata": {
        "id": "oT8f5cUw0OCw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de8979aa-afce-4c5a-e549-1682e0de66ea"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Running\n",
            "(14454, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "def label_encode(df):\n",
        "    le = LabelEncoder()\n",
        "    categorical_cols = df.select_dtypes(include=[object]).columns\n",
        "    for col in categorical_cols:\n",
        "        df[col] = le.fit_transform(df[col])\n",
        "    return df\n",
        "\n",
        "print(\"running\")\n",
        "\n",
        "air_quality_encoded = label_encode(air_quality_imputed)\n",
        "beijing_air_1_encoded = label_encode(beijing_air_1_imputed)\n",
        "beijing_air_2_encoded = label_encode(beijing_air_2_imputed)\n",
        "fertility_encoded = label_encode(fertility_imputed)\n",
        "global_pollution_encoded = label_encode(global_pollution_imputed)\n",
        "heart_disease_encoded = label_encode(heart_disease_imputed)\n",
        "maternal_health_encoded = label_encode(maternal_health_imputed)\n",
        "water_quality_encoded = label_encode(water_quality_imputed)\n",
        "\n",
        "print(air_quality_encoded.shape)\n"
      ],
      "metadata": {
        "id": "8YFAxafVlUBM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8902f5d9-5e11-4702-8f96-b3264ee91da2"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "running\n",
            "(14454, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "air_quality_combined = pd.concat([air_quality_encoded, beijing_air_1_encoded, beijing_air_2_encoded], axis=0)\n",
        "health_combined = pd.concat([fertility_encoded, heart_disease_encoded, maternal_health_encoded], axis=0)\n",
        "water_quality_combined = water_quality_encoded\n",
        "\n",
        "air_quality_stats = air_quality_combined.describe()\n",
        "health_stats = health_combined.describe()\n",
        "water_quality_stats = water_quality_combined.describe()\n",
        "\n",
        "stats_df = pd.concat([air_quality_stats, health_stats, water_quality_stats], axis=1)\n",
        "\n",
        "# Health Dataset\n",
        "health_combined['age_group'] = pd.cut(health_combined['Age'], bins=[18, 24, 34, 44, 54, 64, 100], labels=['18-24', '25-34', '35-44', '45-54', '55-64', '65+'])\n",
        "health_combined['risk_score'] = health_combined[['child disease', 'high_fevers', 'smoking']].sum(axis=1)\n",
        "\n",
        "# Water Quality Dataset\n",
        "water_quality_combined['water_quality_index'] = (water_quality_combined['ph'] + water_quality_combined['Hardness'] + water_quality_combined['Solids']) / 3\n",
        "\n",
        "# Air Quality Dataset\n",
        "air_quality_combined['air_quality_index'] = (air_quality_combined['PM2.5'] + air_quality_combined['PM10'] + air_quality_combined['SO2'] + air_quality_combined['NO2']) / 4\n",
        "\n",
        "health_combined = health_combined.reset_index(drop=True)\n",
        "water_quality_combined = water_quality_combined.reset_index(drop=True)\n",
        "air_quality_combined = air_quality_combined.reset_index(drop=True)\n",
        "\n",
        "combined_data = pd.concat([health_combined, water_quality_combined, air_quality_combined], axis=1)\n",
        "\n",
        "# Fill missing values\n",
        "combined_data.fillna(method='ffill', inplace=True)\n",
        "\n",
        "# Define features and target\n",
        "X = combined_data.drop(['RiskLevel'], axis=1)  # Features\n",
        "y = combined_data['RiskLevel']  # Target\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "Y8CB0pb7CCN5"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBRegressor\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_score\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# param_grid = {\n",
        "#     'n_estimators': [100, 200, 300],\n",
        "#     'max_depth': [3, 5, 7],\n",
        "#     'learning_rate': [0.01, 0.1, 0.2],\n",
        "# }\n",
        "\n",
        "# # Initialize the XGBoost Regressor\n",
        "# xgb = XGBRegressor()\n",
        "\n",
        "# # Set up GridSearchCV\n",
        "# grid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)\n",
        "\n",
        "# # Fit the model\n",
        "# grid_search.fit(X_train, y_train)\n",
        "\n",
        "# # Get the best parameters and the best model\n",
        "# best_params = grid_search.best_params_\n",
        "# best_model = grid_search.best_estimator_\n",
        "\n",
        "# print(f\"Best parameters: {best_params}\")"
      ],
      "metadata": {
        "id": "LMs_eAHNj1PX"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_train.isnull().sum())\n",
        "print(y_train.isin([np.inf, -np.inf]).sum())\n",
        "\n",
        "print(X_train.isnull().sum())\n",
        "print(X_train.isin([np.inf, -np.inf]).sum())\n",
        "\n",
        "X_train.fillna(X_train.mean(), inplace=True)\n",
        "y_train.fillna(y_train.mean(), inplace=True)\n",
        "X_valid.fillna(X_valid.mean(), inplace=True)\n",
        "y_valid.fillna(y_valid.mean(), inplace=True)\n",
        "\n",
        "le = LabelEncoder()\n",
        "X_train['age_group'] = le.fit_transform(X_train['age_group'])\n",
        "X_valid['age_group'] = le.transform(X_valid['age_group'])\n",
        "best_params = {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 200}\n",
        "model = XGBRegressor(**best_params, random_state=42)\n",
        "\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model.predict(X_valid)\n",
        "\n",
        "mse = mean_squared_error(y_valid, y_pred)\n",
        "print(\"Mean Squared Error:\", mse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MFLEwhpc9MUg",
        "outputId": "46e2e4b0-b4da-43ef-c9cf-3b1708cba20c"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "0\n",
            "season                   0\n",
            "age                      0\n",
            "child disease            0\n",
            "accident                 0\n",
            "surgical_intervention    0\n",
            "                        ..\n",
            "Low                      0\n",
            "Close                    0\n",
            "Adj Close                0\n",
            "Volume                   0\n",
            "air_quality_index        0\n",
            "Length: 83, dtype: int64\n",
            "season                   0\n",
            "age                      0\n",
            "child disease            0\n",
            "accident                 0\n",
            "surgical_intervention    0\n",
            "                        ..\n",
            "Low                      0\n",
            "Close                    0\n",
            "Adj Close                0\n",
            "Volume                   0\n",
            "air_quality_index        0\n",
            "Length: 83, dtype: int64\n",
            "Mean Squared Error: 0.004798699259016482\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RJhiiuiE-E5k"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}